{"version":3,"sources":["globals.scss","style.css","variables.scss","hero.scss","_include-media.scss"],"names":[],"mappings":"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","file":"../style.css","sourcesContent":["* {\n\tmargin: 0;\n\tpadding: 0;\n}\n\nbody {\n\tbackground-color: $darkBlue;\n\tcolor: white;\n\tfont-size: 16px;\n}\n\nsection * {\n\tdisplay: block;\n\tbox-sizing: border-box;\n}\n\nsvg {\n\toverflow: visible;\n}","* {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  background-color: #093349;\n  color: white;\n  font-size: 16px;\n}\n\nsection * {\n  display: block;\n  box-sizing: border-box;\n}\n\nsvg {\n  overflow: visible;\n}\n\nsection {\n  height: 100vh;\n  max-width: 1440px;\n  margin: 0 auto;\n}\nsection .hero {\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n  visibility: hidden;\n  border: 1px black solid;\n}\n@media (min-width: 1025px) {\n  section .hero {\n    min-height: 400px;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero {\n    min-height: 650px;\n  }\n}\n@media (max-width: 780px) {\n  section .hero {\n    min-height: 100vh;\n  }\n}\nsection .hero img.wave {\n  position: absolute;\n  display: none;\n  bottom: 0;\n  left: 0;\n}\n@media (min-width: 1025px) {\n  section .hero img#wave_dt {\n    display: block;\n    width: 325%;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero img#wave_dt {\n    display: none;\n  }\n}\n@media (max-width: 780px) {\n  section .hero img#wave_dt {\n    display: none;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero img#wave_tab {\n    display: block;\n    width: 325%;\n  }\n}\n@media (min-width: 1025px) {\n  section .hero img#wave_tab {\n    display: none;\n  }\n}\n@media (max-width: 780px) {\n  section .hero img#wave_tab {\n    display: none;\n  }\n}\n@media (max-width: 780px) {\n  section .hero img#wave_m {\n    display: block;\n    width: 300%;\n  }\n}\n@media (min-width: 1025px) {\n  section .hero img#wave_m {\n    display: none;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero img#wave_m {\n    display: none;\n  }\n}\nsection .hero .wrapper {\n  width: 100%;\n  font-size: 0;\n  margin: 0 auto;\n}\nsection .hero .ornament {\n  position: absolute;\n}\nsection .hero #bubble-wrapper {\n  position: absolute;\n  width: 26%;\n}\n@media (min-width: 1025px) {\n  section .hero #bubble-wrapper {\n    width: 19%;\n    left: 46%;\n    bottom: 8%;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero #bubble-wrapper {\n    width: 26%;\n    margin: 0 auto;\n    bottom: 2%;\n    left: 50%;\n    transform: translateX(-50%);\n  }\n}\n@media (max-width: 780px) {\n  section .hero #bubble-wrapper {\n    width: clamp(150px, 26vh, 380px);\n    bottom: clamp(2%, 14vh, 14%);\n  }\n}\nsection .hero #bubble-wrapper .kids {\n  clip-path: circle();\n  position: absolute;\n  display: none;\n  width: 60%;\n}\n@media (min-width: 1025px) {\n  section .hero #bubble-wrapper img#kid1 {\n    width: 25%;\n    left: -97%;\n    top: 78%;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero #bubble-wrapper img#kid1 {\n    width: 38%;\n    left: 194%;\n    top: 16%;\n  }\n}\n@media (max-width: 780px) {\n  section .hero #bubble-wrapper img#kid1 {\n    width: 31%;\n    left: 113%;\n    top: 0%;\n  }\n}\nsection .hero #bubble-wrapper img#kid2 {\n  clip-path: circle(43% at 50% 44%);\n}\n@media (min-width: 1025px) {\n  section .hero #bubble-wrapper img#kid2 {\n    width: 27%;\n    left: 140%;\n    top: 56%;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero #bubble-wrapper img#kid2 {\n    clip-path: circle(43% at 50% 53%);\n    width: 49%;\n    left: -64%;\n    top: 38%;\n  }\n}\n@media (max-width: 780px) {\n  section .hero #bubble-wrapper img#kid2 {\n    width: 33%;\n    left: -40%;\n    top: 71%;\n  }\n}\n@media (min-width: 1025px) {\n  section .hero #bubble-wrapper img#kid3 {\n    width: 50%;\n    left: -60%;\n    top: 55%;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero #bubble-wrapper img#kid3 {\n    width: 36%;\n    left: -130%;\n    top: 42%;\n  }\n}\n@media (min-width: 1025px) {\n  section .hero #bubble-wrapper img#kid4 {\n    width: 50%;\n    left: 210%;\n    top: 53%;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero #bubble-wrapper img#kid4 {\n    width: 59%;\n    left: 117%;\n    top: 4%;\n  }\n}\n@media (max-width: 780px) {\n  section .hero #bubble-wrapper img#kid4 {\n    width: 50%;\n    left: 78%;\n    top: 95%;\n  }\n}\nsection .hero #bubble-wrapper img#book {\n  width: 100%;\n}\nsection .hero #bubble-wrapper #enter {\n  position: absolute;\n  width: 116%;\n  top: -13%;\n  left: -25%;\n}\nsection .hero #logo-container {\n  position: relative;\n  height: 100%;\n}\n@media (min-width: 1025px) {\n  section .hero #logo-container #logo-wrapper {\n    width: 30%;\n    margin: 0;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero #logo-container #logo-wrapper {\n    width: 40%;\n    margin: 1.5rem auto 1rem;\n  }\n}\n@media (max-width: 780px) {\n  section .hero #logo-container #logo-wrapper {\n    width: 75%;\n    margin: clamp(10%, 7vh, 30%) auto;\n  }\n}\nsection .hero #logo-container #logo-wrapper img#logo {\n  width: 100%;\n}\nsection .hero #logo-container #logo-wrapper img#burst-logo {\n  width: 8%;\n  left: -8%;\n  top: 35%;\n}\n@media (min-width: 1025px) {\n  section .hero #logo-container #logo-wrapper img#stars {\n    width: 7%;\n    left: 205%;\n    top: 56%;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero #logo-container #logo-wrapper img#stars {\n    width: 9%;\n    left: 150%;\n    bottom: -72%;\n  }\n}\n@media (max-width: 780px) {\n  section .hero #logo-container #logo-wrapper img#stars {\n    width: 10%;\n    left: 100%;\n    top: 100%;\n  }\n}\n@media (min-width: 1025px) {\n  section .hero #logo-container #logo-wrapper img#heart {\n    width: 12%;\n    transform: rotate(65deg);\n    left: 100%;\n    top: 11%;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero #logo-container #logo-wrapper img#heart {\n    width: 12%;\n    left: -58%;\n    top: 11%;\n  }\n}\n@media (max-width: 780px) {\n  section .hero #logo-container #logo-wrapper img#heart {\n    width: 10%;\n    left: -10%;\n    top: 100%;\n  }\n}\n@media (min-width: 1025px) {\n  section .hero #logo-container #logo-wrapper img#hearts {\n    width: 12%;\n    left: 330%;\n    top: 69%;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero #logo-container #logo-wrapper img#hearts {\n    width: 12%;\n    left: 129%;\n    top: 13%;\n  }\n}\n@media (max-width: 780px) {\n  section .hero #logo-container #logo-wrapper img#hearts {\n    width: 8%;\n    left: 100%;\n    top: -11%;\n  }\n}\nsection .hero #logo-container p#txt {\n  color: white;\n  text-align: center;\n  max-width: 80%;\n  margin: 0 auto;\n  font-family: cabrito-normal, sans-serif;\n  font-weight: 400;\n  font-style: normal;\n}\nsection .hero #logo-container p#txt span {\n  display: inline;\n}\n@media (min-width: 1025px) {\n  section .hero #logo-container p#txt {\n    font-size: clamp(10px, 2vw, 26px);\n    position: absolute;\n    max-width: 30%;\n    right: 3%;\n    top: 50px;\n  }\n}\n@media (max-width: 1024px) {\n  section .hero #logo-container p#txt {\n    font-size: clamp(24px, 3vw, 28px);\n  }\n}\n@media (max-width: 780px) {\n  section .hero #logo-container p#txt {\n    font-size: clamp(13px, 4vw, 35px);\n  }\n}","// Main var for Include Media Library\n$breakpoints: (phone: 780px, tablet: 1024px, desktop: 1025px);\n// $breakpoints: (phone: 780px, tablet: 1024px, desktop: 1440px);\n\n// Colors\n$darkBlue: #093349;\n$lightBlue: #b7deef;\n\n// Font Sizes\n$font-dt:26px;\n$font-tab:28px;\n$font-m:35px;\n$font-small: 20px;\n// // $font-med: 1.125rem; // 18px\n// $font-med:28px;// 1.75rem; // \n// $font-lg: 1.25rem; // 32.5px\n// $font-xlg: 3.25rem; //52px\n","section {\n\t\n\theight: 100vh;\n\tmax-width: 1440px;\n\tmargin: 0 auto;\n\n\t.hero {\n\n\t\tmargin: 0 auto;\n\t\tposition: relative;\n\t\toverflow: hidden;\n\t\tvisibility: hidden;\n\t\tborder: 1px black solid;\n\n\t\t@include media(\">=desktop\") {\n\t\t\t// border: 5px red solid;\n\t\t\tmin-height: 400px;\n\t\t}\n\t\t@include media(\"<=tablet\") {\n\t\t\t// border: 5px white solid;\n\t\t\tmin-height: 650px;\n\t\t}\n\t\t@include media(\"<=phone\") {\n\t\t\t// border: 5px blue solid;\n\t\t\tmin-height: 100vh;\n\t\t}\n\n\t\timg.wave {\n\t\t\tposition: absolute;\n\t\t\tdisplay: none;\n\t\t\tbottom: 0;\n\t\t\tleft: 0;\n\t\t}\n\t\timg#wave_dt {\n\t\t\t@include media(\">=desktop\") {\n\t\t\t\tdisplay: block;\n\t\t\t\twidth: 325%;\n\t\t\t}\n\t\t\t@include media(\"<=tablet\") {display: none;}\n\t\t\t@include media(\"<=phone\") {display: none;}\n\t\t}\n\t\timg#wave_tab {\n\t\t\t@include media(\"<=tablet\") {\n\t\t\t\tdisplay: block;\n\t\t\t\twidth: 325%;\n\t\t\t}\n\t\t\t@include media(\">=desktop\") {display: none;}\n\t\t\t@include media(\"<=phone\") {display: none;}\n\t\t}\n\t\timg#wave_m {\n\t\t\t@include media(\"<=phone\") {\n\t\t\t\tdisplay: block;\n\t\t\t\twidth: 300%;\n\t\t\t\t// width: 260%;\n\t\t\t\t// bottom: -20%;\n\t\t\t}\n\t\t\t@include media(\">=desktop\") {display: none;}\n\t\t\t@include media(\"<=tablet\") {display: none;}\n\t\t}\n\n\t\t.wrapper {\n\t\t\twidth: 100%;\n\t\t\tfont-size: 0;\n\t\t\tmargin: 0 auto;\n\t\t}\n\t\t.ornament {\n\t\t\tposition: absolute;\n\t\t}\n\t\t#bubble-wrapper {\n\t\t\tposition: absolute;\n\t\t\twidth: 26%;//275px;\n\t\t\t// border: 1px dashed teal;\n\n\t\t\t@include media(\">=desktop\") {\n\t\t\t\twidth: 19%;//275px;\n\t\t\t\tleft: 46%;\n\t\t\t\t// top: 24%;\n\t\t\t\tbottom: 8%;\n\t\t\t}\n\t\t\t@include media(\"<=tablet\") {\n\t\t\t\twidth: 26%;//275px;\n\t\t\t\tmargin: 0 auto;\n\t\t\t\tbottom: 2%;\n\t\t\t\tleft: 50%;\n\t\t\t\ttransform:translateX(-50%);\n\t\t\t}\n\t\t\t@include media(\"<=phone\") {\n\t\t\t\twidth: clamp(150px, 26vh, 380px);\n\t\t\t\tbottom: clamp(2%, 14vh, 14%);\n\t\t\t\t// width: 48%;// 380px;\n\t\t\t\t// bottom: 14%;\n\t\t\t}\n\t\t\t.kids {\n\t\t\t\tclip-path: circle();\n\t\t\t\tposition: absolute;\n\t\t\t\tdisplay: none;\n\t\t\t\twidth: 60%;//200px;\n\t\t\t}\n\t\t\timg#kid1 {\n\t\t\t\t@include media(\">=desktop\") {\n\t\t\t\t\twidth: 25%;\n\t\t\t\t\tleft: -97%;\n\t\t\t\t\ttop: 78%;\n\t\t\t\t}\n\t\t\t\t@include media(\"<=tablet\") {\n\t\t\t\t\twidth: 38%;\n\t\t\t\t\tleft: 194%;\n\t\t\t\t\ttop: 16%;\n\t\t\t\t}\n\t\t\t\t@include media(\"<=phone\") {\n\t\t\t\t\twidth: 31%;\n\t\t\t\t\tleft: 113%;\n\t\t\t\t\ttop: 0%;//13%;\n\t\t\t\t}\n\t\t\t}\n\t\t\timg#kid2 {\n\t\t\t\tclip-path:circle(43% at 50% 44%);\n\n\t\t\t\t@include media(\">=desktop\") {\n\t\t\t\t\twidth: 27%;\n\t\t\t\t\tleft: 140%;\n\t\t\t\t\ttop: 56%;\n\t\t\t\t\t// width: 50%;\n\t\t\t\t\t// left: -60%;\n\t\t\t\t\t// top: 55%;\n\t\t\t\t}\n\t\t\t\t@include media(\"<=tablet\") {\n\t\t\t\t\tclip-path:circle(43% at 50% 53%);\n\t\t\t\t\twidth: 49%;\n\t\t\t\t\tleft: -64%;\n\t\t\t\t\ttop: 38%;//44%;\n\t\t\t\t}\n\t\t\t\t@include media(\"<=phone\") {\n\t\t\t\t\twidth: 33%;\n\t\t\t\t\tleft: -40%;\n\t\t\t\t\ttop: 71%;\n\t\t\t\t}\n\t\t\t}\n\t\t\timg#kid3 {\n\t\t\t\t@include media(\">=desktop\") {\n\t\t\t\t\t// width: 24%;\n\t\t\t\t\t// left: 140%;\n\t\t\t\t\t// top: 56%;\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\tleft: -60%;\n\t\t\t\t\ttop: 55%;\n\t\t\t\t}\n\t\t\t\t@include media(\"<=tablet\") {\n\t\t\t\t\twidth: 36%;\n\t\t\t\t\tleft: -130%;\n\t\t\t\t\ttop: 42%;\n\t\t\t\t}\n\t\t\t}\n\t\t\timg#kid4 {\n\t\t\t\t@include media(\">=desktop\") {\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\tleft: 210%;\n\t\t\t\t\ttop: 53%;\n\t\t\t\t}\n\t\t\t\t@include media(\"<=tablet\") {\n\t\t\t\t\twidth: 59%;\n\t\t\t\t\tleft: 117%;\n\t\t\t\t\ttop: 4%;\n\t\t\t\t}\n\t\t\t\t@include media(\"<=phone\") {\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\tleft: 78%;\n\t\t\t\t\ttop: 95%;\n\t\t\t\t}\n\t\t\t}\n\t\t\timg#book {\n\t\t\t\twidth: 100%;\n\t\t\t\t// opacity: 0.5;\n\t\t\t}\n\t\t\t#enter {\n\t\t\t\tposition: absolute;\n\t\t\t\twidth: 116%;\n\t\t\t\ttop: -13%;\n\t\t\t\tleft: -25%;\n\t\t\t}\n\t\t}\n\n\t\t#logo-container {\n\t\t\tposition: relative;\n\t\t\theight: 100%;\n\n\t\t\t#logo-wrapper {\n\t\t\t\t// border: 1px dashed teal;\n\n\t\t\t\t@include media(\">=desktop\") {\n\t\t\t\t\twidth: 30%;//383px;\n\t\t\t\t\tmargin: 0;\n\t\t\t\t}\n\t\t\t\t@include media(\"<=tablet\") {\n\t\t\t\t\twidth: 40%;//400px;\n\t\t\t\t\tmargin: 1.5rem auto 1rem;\n\t\t\t\t}\n\t\t\t\t@include media(\"<=phone\") {\n\t\t\t\t\twidth: 75%;\n\t\t\t\t\tmargin: clamp(10%, 7vh, 30%) auto;\n\t\t\t\t\t// margin-top: clamp(10%, 7vh, 30%);\n\t\t\t\t\t// margin-bottom: clamp(10%, 7vh, 30%);\n\t\t\t\t}\n\n\t\t\t\timg#logo {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\t\t\t\timg#burst-logo{\n\t\t\t\t\twidth: 8%;\n\t\t\t\t\tleft: -8%;\n\t\t\t\t\ttop: 35%;\n\t\t\t\t}\n\t\t\t\timg#stars {\n\t\t\t\t\t@include media(\">=desktop\") {\n\t\t\t\t\t\twidth: 7%;\n\t\t\t\t\t\tleft: 205%;\n\t\t\t\t\t\ttop: 56%;\n\t\t\t\t\t}\n\t\t\t\t\t@include media(\"<=tablet\") {\n\t\t\t\t\t\twidth: 9%;\n\t\t\t\t\t\tleft: 150%;\n\t\t\t\t\t\tbottom: -72%;\n\t\t\t\t\t}\n\t\t\t\t\t@include media(\"<=phone\") {\n\t\t\t\t\t\twidth: 10%;\n\t\t\t\t\t\tleft: 100%;\n\t\t\t\t\t\ttop: 100%;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\timg#heart {\n\t\t\t\t\t@include media(\">=desktop\") {\n\t\t\t\t\t\twidth: 12%;\n\t\t\t\t\t\ttransform:rotate(65deg);\n\t\t\t\t\t\tleft: 100%;\n\t\t\t\t\t\ttop: 11%;\n\t\t\t\t\t}\n\t\t\t\t\t@include media(\"<=tablet\") {\n\t\t\t\t\t\twidth: 12%;\n\t\t\t\t\t\tleft: -58%;\n\t\t\t\t\t\ttop: 11%;\n\t\t\t\t\t}\n\t\t\t\t\t@include media(\"<=phone\") {\n\t\t\t\t\t\twidth: 10%;\n\t\t\t\t\t\tleft: -10%;\n\t\t\t\t\t\ttop: 100%;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\timg#hearts {\n\t\t\t\t\t@include media(\">=desktop\") {\n\t\t\t\t\t\twidth: 12%;\n\t\t\t\t\t\tleft: 330%;\n\t\t\t\t\t\ttop: 69%;\n\t\t\t\t\t}\n\t\t\t\t\t@include media(\"<=tablet\") {\n\t\t\t\t\t\twidth: 12%;\n\t\t\t\t\t\tleft: 129%;\n\t\t\t\t\t\ttop: 13%;\n\t\t\t\t\t}\n\t\t\t\t\t@include media(\"<=phone\") {\n\t\t\t\t\t\twidth: 8%;\n\t\t\t\t\t\tleft: 100%;\n\t\t\t\t\t\ttop: -11%;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tp#txt {\n\t\t\t\tcolor: white;\n\t\t\t\t// content: 'Capture your little one’s silliest, smiliest side for their chance to be Gerber’s next Chief&nbsp;Growing&nbsp;Officer!';\n\t\t\t\ttext-align: center;\n\t\t\t\tmax-width: 80%;\n\t\t\t\tmargin: 0 auto;\n\t\t\t\t// border: 2px dotted pink;\n\t\t\t\tfont: {\n\t\t\t\t\tfamily: cabrito-normal, sans-serif; // family: soleil, sans-serif;\n\t\t\t\t\tweight: 400;\n\t\t\t\t\tstyle: normal;\n\t\t\t\t}\n\n\t\t\t\tspan {\n\t\t\t\t\tdisplay: inline;\n\t\t\t\t}\n\n\t\t\t\t@include media(\">=desktop\") {\n\t\t\t\t\tfont-size: clamp(10px, 2vw, $font-dt);\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tmax-width: 30%;//25rem;\n\t\t\t\t\tright: 3%;//80px;\n\t\t\t\t\ttop: 50px;\n\t\t\t\t}\n\t\t\t\t@include media(\"<=tablet\") {\n\t\t\t\t  font-size: clamp(24px, 3vw, $font-tab);\n\t\t\t\t}\n\t\t\t\t@include media(\"<=phone\") {\n\t\t\t\t  font-size: clamp(13px, 4vw, $font-m);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","@charset \"UTF-8\";\n\n//     _            _           _                           _ _\n//    (_)          | |         | |                         | (_)\n//     _ _ __   ___| |_   _  __| | ___   _ __ ___   ___  __| |_  __ _\n//    | | '_ \\ / __| | | | |/ _` |/ _ \\ | '_ ` _ \\ / _ \\/ _` | |/ _` |\n//    | | | | | (__| | |_| | (_| |  __/ | | | | | |  __/ (_| | | (_| |\n//    |_|_| |_|\\___|_|\\__,_|\\__,_|\\___| |_| |_| |_|\\___|\\__,_|_|\\__,_|\n//\n//      Simple, elegant and maintainable media queries in Sass\n//                        v1.4.9\n//\n//        https://eduardoboucas.github.io/include-media\n//\n//         Authors: Eduardo Boucas (@eduardoboucas)\n//                  Kitty Giraudel (@kittygiraudel)\n//\n//      This project is licensed under the terms of the MIT license\n////\n/// include-media library public configuration\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Creates a list of global breakpoints\n///\n/// @example scss - Creates a single breakpoint with the label `phone`\n///  $breakpoints: ('phone': 320px);\n///\n$breakpoints: (\n  'phone': 320px,\n  'tablet': 768px,\n  'desktop': 1024px\n) !default;\n\n\n///\n/// Creates a list of static expressions or media types\n///\n/// @example scss - Creates a single media type (screen)\n///  $media-expressions: ('screen': 'screen');\n///\n/// @example scss - Creates a static expression with logical disjunction (OR operator)\n///  $media-expressions: (\n///    'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)'\n///  );\n///\n$media-expressions: (\n  'screen': 'screen',\n  'print': 'print',\n  'handheld': 'handheld',\n  'landscape': '(orientation: landscape)',\n  'portrait': '(orientation: portrait)',\n  'retina2x': '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi), (min-resolution: 2dppx)',\n  'retina3x': '(-webkit-min-device-pixel-ratio: 3), (min-resolution: 350dpi), (min-resolution: 3dppx)'\n) !default;\n\n\n///\n/// Defines a number to be added or subtracted from each unit when declaring breakpoints with exclusive intervals\n///\n/// @example scss - Interval for pixels is defined as `1` by default\n///  @include media('>128px') {}\n///\n///  /* Generates: */\n///  @media (min-width: 129px) {}\n///\n/// @example scss - Interval for ems is defined as `0.01` by default\n///  @include media('>20em') {}\n///\n///  /* Generates: */\n///  @media (min-width: 20.01em) {}\n///\n/// @example scss - Interval for rems is defined as `0.1` by default, to be used with `font-size: 62.5%;`\n///  @include media('>2.0rem') {}\n///\n///  /* Generates: */\n///  @media (min-width: 2.1rem) {}\n///\n$unit-intervals: (\n  'px': 1,\n  'em': 0.01,\n  'rem': 0.1,\n  '': 0\n) !default;\n\n///\n/// Defines whether support for media queries is available, useful for creating separate stylesheets\n/// for browsers that don't support media queries.\n///\n/// @example scss - Disables support for media queries\n///  $im-media-support: false;\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n$im-media-support: true !default;\n\n///\n/// Selects which breakpoint to emulate when support for media queries is disabled. Media queries that start at or\n/// intercept the breakpoint will be displayed, any others will be ignored.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  @include media('>=tablet') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* Generates: */\n///  .foo {\n///    color: tomato;\n///  }\n///\n/// @example scss - This media query will NOT show because it does not intercept the desktop breakpoint\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'tablet';\n///  @include media('>=desktop') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-breakpoint: 'desktop' !default;\n\n///\n/// Selects which media expressions are allowed in an expression for it to be used when media queries\n/// are not supported.\n///\n/// @example scss - This media query will show because it intercepts the static breakpoint and contains only accepted media expressions\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'screen') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///   /* Generates: */\n///   .foo {\n///     color: tomato;\n///   }\n///\n/// @example scss - This media query will NOT show because it intercepts the static breakpoint but contains a media expression that is not accepted\n///  $im-media-support: false;\n///  $im-no-media-breakpoint: 'desktop';\n///  $im-no-media-expressions: ('screen');\n///  @include media('>=tablet', 'retina2x') {\n///    .foo {\n///      color: tomato;\n///    }\n///  }\n///\n///  /* No output */\n///\n$im-no-media-expressions: ('screen', 'portrait', 'landscape') !default;\n\n////\n/// Cross-engine logging engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Log a message either with `@error` if supported\n/// else with `@warn`, using `feature-exists('at-error')`\n/// to detect support.\n///\n/// @param {String} $message - Message to log\n///\n@function im-log($message) {\n  @if feature-exists('at-error') {\n    @error $message;\n  } @else {\n    @warn $message;\n    $_: noop();\n  }\n\n  @return $message;\n}\n\n\n///\n/// Wrapper mixin for the log function so it can be used with a more friendly\n/// API than `@if im-log('..') {}` or `$_: im-log('..')`. Basically, use the function\n/// within functions because it is not possible to include a mixin in a function\n/// and use the mixin everywhere else because it's much more elegant.\n///\n/// @param {String} $message - Message to log\n///\n@mixin log($message) {\n  @if im-log($message) {}\n}\n\n\n///\n/// Function with no `@return` called next to `@warn` in Sass 3.3\n/// to trigger a compiling error and stop the process.\n///\n@function noop() {}\n\n///\n/// Determines whether a list of conditions is intercepted by the static breakpoint.\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @return {Boolean} - Returns true if the conditions are intercepted by the static breakpoint\n///\n@function im-intercepts-static-breakpoint($conditions...) {\n  $no-media-breakpoint-value: map-get($breakpoints, $im-no-media-breakpoint);\n\n  @if not $no-media-breakpoint-value {\n    @if im-log('`#{$im-no-media-breakpoint}` is not a valid breakpoint.') {}\n  }\n\n  @each $condition in $conditions {\n    @if not map-has-key($media-expressions, $condition) {\n      $operator: get-expression-operator($condition);\n      $prefix: get-expression-prefix($operator);\n      $value: get-expression-value($condition, $operator);\n\n      @if ($prefix == 'max' and $value <= $no-media-breakpoint-value) or\n          ($prefix == 'min' and $value > $no-media-breakpoint-value) {\n        @return false;\n      }\n    } @else if not index($im-no-media-expressions, $condition) {\n      @return false;\n    }\n  }\n\n  @return true;\n}\n\n////\n/// Parsing engine\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Get operator of an expression\n///\n/// @param {String} $expression - Expression to extract operator from\n///\n/// @return {String} - Any of `>=`, `>`, `<=`, `<`, `≥`, `≤`\n///\n@function get-expression-operator($expression) {\n  @each $operator in ('>=', '>', '<=', '<', '≥', '≤') {\n    @if str-index($expression, $operator) {\n      @return $operator;\n    }\n  }\n\n  // It is not possible to include a mixin inside a function, so we have to\n  // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n  // functions cannot be called anywhere in Sass, we need to hack the call in\n  // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n  // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n  $_: im-log('No operator found in `#{$expression}`.');\n}\n\n\n///\n/// Get dimension of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract dimension from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {String} - `width` or `height` (or potentially anything else)\n///\n@function get-expression-dimension($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $parsed-dimension: str-slice($expression, 0, $operator-index - 1);\n  $dimension: 'width';\n\n  @if str-length($parsed-dimension) > 0 {\n    $dimension: $parsed-dimension;\n  }\n\n  @return $dimension;\n}\n\n\n///\n/// Get dimension prefix based on an operator\n///\n/// @param {String} $operator - Operator\n///\n/// @return {String} - `min` or `max`\n///\n@function get-expression-prefix($operator) {\n  @return if(index(('<', '<=', '≤'), $operator), 'max', 'min');\n}\n\n\n///\n/// Get value of an expression, based on a found operator\n///\n/// @param {String} $expression - Expression to extract value from\n/// @param {String} $operator - Operator from `$expression`\n///\n/// @return {Number} - A numeric value\n///\n@function get-expression-value($expression, $operator) {\n  $operator-index: str-index($expression, $operator);\n  $value: str-slice($expression, $operator-index + str-length($operator));\n\n  @if map-has-key($breakpoints, $value) {\n    $value: map-get($breakpoints, $value);\n  } @else {\n    $value: to-number($value);\n  }\n\n  $interval: map-get($unit-intervals, unit($value));\n\n  @if not $interval {\n    // It is not possible to include a mixin inside a function, so we have to\n    // rely on the `im-log(..)` function rather than the `log(..)` mixin. Because\n    // functions cannot be called anywhere in Sass, we need to hack the call in\n    // a dummy variable, such as `$_`. If anybody ever raise a scoping issue with\n    // Sass 3.3, change this line in `@if im-log(..) {}` instead.\n    $_: im-log('Unknown unit `#{unit($value)}`.');\n  }\n\n  @if $operator == '>' {\n    $value: $value + $interval;\n  } @else if $operator == '<' {\n    $value: $value - $interval;\n  }\n\n  @return $value;\n}\n\n\n///\n/// Parse an expression to return a valid media-query expression\n///\n/// @param {String} $expression - Expression to parse\n///\n/// @return {String} - Valid media query\n///\n@function parse-expression($expression) {\n  // If it is part of $media-expressions, it has no operator\n  // then there is no need to go any further, just return the value\n  @if map-has-key($media-expressions, $expression) {\n    @return map-get($media-expressions, $expression);\n  }\n\n  $operator: get-expression-operator($expression);\n  $dimension: get-expression-dimension($expression, $operator);\n  $prefix: get-expression-prefix($operator);\n  $value: get-expression-value($expression, $operator);\n\n  @return '(#{$prefix}-#{$dimension}: #{$value})';\n}\n\n///\n/// Slice `$list` between `$start` and `$end` indexes\n///\n/// @access private\n///\n/// @param {List} $list - List to slice\n/// @param {Number} $start [1] - Start index\n/// @param {Number} $end [length($list)] - End index\n///\n/// @return {List} Sliced list\n///\n@function slice($list, $start: 1, $end: length($list)) {\n  @if length($list) < 1 or $start > $end {\n    @return ();\n  }\n\n  $result: ();\n\n  @for $i from $start through $end {\n    $result: append($result, nth($list, $i));\n  }\n\n  @return $result;\n}\n\n////\n/// String to number converter\n/// @author Kitty Giraudel\n/// @access private\n////\n\n\n///\n/// Casts a string into a number\n///\n/// @param {String | Number} $value - Value to be parsed\n///\n/// @return {Number}\n///\n@function to-number($value) {\n  @if type-of($value) == 'number' {\n    @return $value;\n  } @else if type-of($value) != 'string' {\n    $_: im-log('Value for `to-number` should be a number or a string.');\n  }\n\n  $first-character: str-slice($value, 1, 1);\n  $result: 0;\n  $digits: 0;\n  $minus: ($first-character == '-');\n  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);\n\n  // Remove +/- sign if present at first character\n  @if ($first-character == '+' or $first-character == '-') {\n    $value: str-slice($value, 2);\n  }\n\n  @for $i from 1 through str-length($value) {\n    $character: str-slice($value, $i, $i);\n\n    @if not (index(map-keys($numbers), $character) or $character == '.') {\n      @return to-length(if($minus, -$result, $result), str-slice($value, $i))\n    }\n\n    @if $character == '.' {\n      $digits: 1;\n    } @else if $digits == 0 {\n      $result: $result * 10 + map-get($numbers, $character);\n    } @else {\n      $digits: $digits * 10;\n      $result: $result + map-get($numbers, $character) / $digits;\n    }\n  }\n\n  @return if($minus, -$result, $result);\n}\n\n\n///\n/// Add `$unit` to `$value`\n///\n/// @param {Number} $value - Value to add unit to\n/// @param {String} $unit - String representation of the unit\n///\n/// @return {Number} - `$value` expressed in `$unit`\n///\n@function to-length($value, $unit) {\n  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);\n\n  @if not index(map-keys($units), $unit) {\n    $_: im-log('Invalid unit `#{$unit}`.');\n  }\n\n  @return $value * map-get($units, $unit);\n}\n\n///\n/// This mixin aims at redefining the configuration just for the scope of\n/// the call. It is helpful when having a component needing an extended\n/// configuration such as custom breakpoints (referred to as tweakpoints)\n/// for instance.\n///\n/// @author Kitty Giraudel\n///\n/// @param {Map} $tweakpoints [()] - Map of tweakpoints to be merged with `$breakpoints`\n/// @param {Map} $tweak-media-expressions [()] - Map of tweaked media expressions to be merged with `$media-expression`\n///\n/// @example scss - Extend the global breakpoints with a tweakpoint\n///  @include media-context(('custom': 678px)) {\n///    .foo {\n///      @include media('>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend the global media expressions with a custom one\n///  @include media-context($tweak-media-expressions: ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone') {\n///       // ...\n///      }\n///    }\n///  }\n///\n/// @example scss - Extend both configuration maps\n///  @include media-context(('custom': 678px), ('all': 'all')) {\n///    .foo {\n///      @include media('all', '>phone', '<=custom') {\n///       // ...\n///      }\n///    }\n///  }\n///\n@mixin media-context($tweakpoints: (), $tweak-media-expressions: ()) {\n  // Save global configuration\n  $global-breakpoints: $breakpoints;\n  $global-media-expressions: $media-expressions;\n\n  // Update global configuration\n  $breakpoints: map-merge($breakpoints, $tweakpoints) !global;\n  $media-expressions: map-merge($media-expressions, $tweak-media-expressions) !global;\n\n  @content;\n\n  // Restore global configuration\n  $breakpoints: $global-breakpoints !global;\n  $media-expressions: $global-media-expressions !global;\n}\n\n////\n/// include-media public exposed API\n/// @author Eduardo Boucas\n/// @access public\n////\n\n\n///\n/// Generates a media query based on a list of conditions\n///\n/// @param {Arglist}   $conditions  - Media query conditions\n///\n/// @example scss - With a single set breakpoint\n///  @include media('>phone') { }\n///\n/// @example scss - With two set breakpoints\n///  @include media('>phone', '<=tablet') { }\n///\n/// @example scss - With custom values\n///  @include media('>=358px', '<850px') { }\n///\n/// @example scss - With set breakpoints with custom values\n///  @include media('>desktop', '<=1350px') { }\n///\n/// @example scss - With a static expression\n///  @include media('retina2x') { }\n///\n/// @example scss - Mixing everything\n///  @include media('>=350px', '<tablet', 'retina3x') { }\n///\n@mixin media($conditions...) {\n  @if ($im-media-support and length($conditions) == 0) or\n      (not $im-media-support and im-intercepts-static-breakpoint($conditions...)) {\n    @content;\n  } @else if ($im-media-support and length($conditions) > 0) {\n    @media #{unquote(parse-expression(nth($conditions, 1)))} {\n      // Recursive call\n      @include media(slice($conditions, 2)...) {\n        @content;\n      }\n    }\n  }\n}\n"]}